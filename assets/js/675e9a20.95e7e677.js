"use strict";(self.webpackChunksraddhanand=self.webpackChunksraddhanand||[]).push([[8788],{3905:function(e,a,t){t.d(a,{Zo:function(){return m},kt:function(){return c}});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(t),c=l,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||r;return t?n.createElement(k,i(i({ref:a},m),{},{components:t})):n.createElement(k,i({ref:a},m))}));function c(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=d;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7029:function(e,a,t){t.r(a),t.d(a,{assets:function(){return m},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var n=t(7462),l=t(3366),r=(t(7294),t(3905)),i=["components"],o={id:"data-explore",sidebar_label:"Data Explore",title:"Data exploration/transformation"},p=void 0,s={unversionedId:"ml/data-explore",id:"ml/data-explore",title:"Data exploration/transformation",description:"1. Reading the data",source:"@site/docs/ml/data-explore.md",sourceDirName:"ml",slug:"/ml/data-explore",permalink:"/docs/ml/data-explore",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ml/data-explore.md",tags:[],version:"current",frontMatter:{id:"data-explore",sidebar_label:"Data Explore",title:"Data exploration/transformation"},sidebar:"data science",previous:{title:"Pandas",permalink:"/docs/ml/pandas"}},m={},u=[{value:"Reading the data",id:"reading-the-data",level:2},{value:"Variable Identification",id:"variable-identification",level:2},{value:"Univariate Analysis",id:"univariate-analysis",level:2},{value:"Bi-variate Analysis",id:"bi-variate-analysis",level:2},{value:"Missing value treatment",id:"missing-value-treatment",level:2},{value:"Outliers",id:"outliers",level:2},{value:"Varialbe transformation",id:"varialbe-transformation",level:2}],d={toc:u};function c(e){var a=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Reading the data"),(0,r.kt)("li",{parentName:"ol"},"Variable identification",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"type of variables",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"predictors"),(0,r.kt)("li",{parentName:"ul"},"targets"))),(0,r.kt)("li",{parentName:"ul"},"data types"),(0,r.kt)("li",{parentName:"ul"},"variable category",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Categorical"),(0,r.kt)("li",{parentName:"ul"},"Continuous"))))),(0,r.kt)("li",{parentName:"ol"},"Univariate analysis",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Bar plot"),(0,r.kt)("li",{parentName:"ul"},"histograms"))),(0,r.kt)("li",{parentName:"ol"},"Bi-variate analysis",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"relation between 2 vars"))),(0,r.kt)("li",{parentName:"ol"},"Missing values treatment"),(0,r.kt)("li",{parentName:"ol"},"Outlier treatment"),(0,r.kt)("li",{parentName:"ol"},"variable transerfmation")),(0,r.kt)("h2",{id:"reading-the-data"},"Reading the data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\n\ndf = pd.read_csv('data.csv')\ndf.shape\ndf.size\ndf.columns\ndf.head\ndf.head(10)\n")),(0,r.kt)("h2",{id:"variable-identification"},"Variable Identification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Types:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"identify independent")," : which we are trying to predict"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dependent variables")," : which help in predicting the dependent variables"),(0,r.kt)("li",{parentName:"ul"},"Distinguish using the problem statement"))),(0,r.kt)("li",{parentName:"ul"},"Category:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Modeling do differ for Continuous and categorical variables"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Continuous")," : can take any value in the range",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"pandas ",(0,r.kt)("code",null,"int")," or ",(0,r.kt)("code",null,"float")," dtypes     "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"categorical variables")," : discreat    ",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"pandas ",(0,r.kt)("code",null,"object")," dtypes    ")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.dtypes\n")),(0,r.kt)("h2",{id:"univariate-analysis"},"Univariate Analysis"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Explore one variable at a time"),(0,r.kt)("li",{parentName:"ol"},"summerize the variable"),(0,r.kt)("li",{parentName:"ol"},"Discover insights and anomolies",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"type of data distribution"),(0,r.kt)("li",{parentName:"ul"},"does the data disribution looks correct"),(0,r.kt)("li",{parentName:"ul"},"find anomolies"))),(0,r.kt)("li",{parentName:"ol"},"Box plot to find anomolies (mostly for Continous data)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Lower fence, Q1, median, Q3, Upper fence"),(0,r.kt)("li",{parentName:"ul"},"lower - Q1 >> 25% of data"),(0,r.kt)("li",{parentName:"ul"},"Box contains 50% of data"))),(0,r.kt)("li",{parentName:"ol"},"Analysis varies with type of variable"),(0,r.kt)("li",{parentName:"ol"},"Analyse Continuous Variables:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Tabular methods",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"central tendency & dispersion"),": mean, median, standarad deviation        ",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.describe()\n"))),(0,r.kt)("li",{parentName:"ul"},"missing values"))),(0,r.kt)("li",{parentName:"ul"},"Graphical methods",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Distribution of variable")," : symmetric/ right skewed/ Left skewed",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"histograms",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.hist()\n"))))),(0,r.kt)("li",{parentName:"ul"},"outliers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"boxplot",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.boxplot('price')\ndf['price'].plot.box()\n"))))))))),(0,r.kt)("li",{parentName:"ol"},"Analyse categorical Variables:    ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tabular methods"),": Count",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['location'].value_counts()\ndf['location'].value_counts() * 100/len(df['location'])\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Graphical methods")," : Bar plot",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['location'].value_counts().plot.bar()\ndf['location'].value_counts().head(5).plot.bar()\n(df['location'].value_counts() * 100/len(df['location'])).head(5).plot.bar()\n")))))),(0,r.kt)("h2",{id:"bi-variate-analysis"},"Bi-variate Analysis"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When 2 variables need to be studied together for emirical relationship")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"it also helps in detecting anomolies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"type"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"continuous variables"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"scatter plot",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.plot.scatter('total_sqft', 'price')\n"))),(0,r.kt)("li",{parentName:"ul"},"correlation between valiables        ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"r ="),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"positive correlation"),": When one increases other var increases (r > 0)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"no correlation"),": r = 0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"negative correlation")," : When one increases other var decreases (r < 0)",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.corr()\ndf['price'].corr(df['total_sqft'])\n"))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"1 Continuous and 1 categorical:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Bar plot",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.groupby('location')['price'].mean().plot.bar()\n"))),(0,r.kt)("li",{parentName:"ul"},"2-Sample T-test",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.stats import ttest_ind\ndf_marat = df[(df['availability'] == 'Ready To Move') & (df['location'] == 'Marathahalli')]\ndf_white = df[(df['availability'] == 'Ready To Move') & (df['location'] == 'Whitefield')]\ndf_srjp = df[(df['availability'] == 'Ready To Move') & (df['location'] == 'Sarjapur  Road')]\nttest_ind(df_white['price'],df_srjp['price'], nan_policy='omit' )\nttest_ind(df_white['price'],df_marat['price'], nan_policy='omit' )\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"2 categorical variables"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"two way table"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['size'] = df['size'].apply(lambda x: int(str(x).replace('Bedroom','').replace('BHK','').replace('RK','').replace('nan','0').strip()) if x is not None else None)\npd.crosstab(df['area_type'], df['size'])\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"chi-square Test"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from scipy.stats import chi2_contingency\nchi2_contingency(pd.crosstab(df['area_type'], df['size']))\n")))))))),(0,r.kt)("h2",{id:"missing-value-treatment"},"Missing value treatment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Identify"),":",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("code",null,"describe")," ",(0,r.kt)("code",null,"count")," property in conjuction with ",(0,r.kt)("code",null,"shape")," output.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.share()\ndf.describe() # displays only continuous variables\ndf.describe(include='all')  # displays continuous and categorical variables\n")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Use this method for continuous variables"))),(0,r.kt)("li",{parentName:"ol"},"use ",(0,r.kt)("code",null,"isnull"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.isnull()\ndf.isnull().sum()\n"))))),(0,r.kt)("li",{parentName:"ul"},"Dealing with missing values",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"imputaion")," : Instead of deleting the missing values, handle it inline",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.fillna('0')\ndf['size'].fillna(0)\ndf.fillna('0',inplace=True)\ndf['bath'].fillna(int(df['bath'].mean()))\ndf['size'].fillna(int(df['size'].mode()))\ndf['size'].fillna(int(df['size'].median()))\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"deletion")," : Delete the row or column",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"delete all the rows where missing values present",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.dropna()\ndf.dropna(how='all') # remove the rows where all columns have missing values\ndf.dropna(axis=1) # remove the columns where missing values present\ndf.dropna(how='all', axis=1)  # remove the columns where missing values present\n")))))))),(0,r.kt)("h2",{id:"outliers"},"Outliers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reasons",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"date entry errors"),(0,r.kt)("li",{parentName:"ul"},"measumente errors (km vs m)"),(0,r.kt)("li",{parentName:"ul"},"processing error"),(0,r.kt)("li",{parentName:"ul"},"change in the underlying population"))),(0,r.kt)("li",{parentName:"ul"},"type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"univariate",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"boxplot",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IQR = Q3-Q1"),(0,r.kt)("li",{parentName:"ul"},"if value < Q1 - 1.5",(0,r.kt)("em",{parentName:"li"},"IQR or > Q3 + 1.5"),"IQR"))))),(0,r.kt)("li",{parentName:"ul"},"bi-variate",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"scatter plot"))))),(0,r.kt)("li",{parentName:"ul"},"dealing",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Delete the observation"),(0,r.kt)("li",{parentName:"ul"},"transform & binning values"),(0,r.kt)("li",{parentName:"ul"},"imputing like missing values"),(0,r.kt)("li",{parentName:"ul"},"treat them as seperate")))),(0,r.kt)("h2",{id:"varialbe-transformation"},"Varialbe transformation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"replace var values with some function"),(0,r.kt)("li",{parentName:"ul"},"Commont methods:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Logarithms: log of variable reduces right skewedness",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['price'].plot.hist()\nnp.log(df['price']).plot.hist()\n"))),(0,r.kt)("li",{parentName:"ol"},"Square root: used for right skewedness with positive values",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"np.sqrt(df['price']).plot.hist()\n"))),(0,r.kt)("li",{parentName:"ol"},"Cube root:  used for right skewedness with positive or negative values",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"np.power(df['price'],1/3).plot.hist()\n"))),(0,r.kt)("li",{parentName:"ol"},"Binning: continuous variable to categorical variable",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['total_sqft'].plot.hist()\nbins = [0, 1000, 2000, 3000, 16000]\ngroups = ['congested', 'livable', 'spacious', 'luxery']\ndf['area_cat'] = pd.cut(df['total_sqft'],bins,labels=groups)\ndf['area_cat'].value_counts()\n")))))))}c.isMDXComponent=!0}}]);